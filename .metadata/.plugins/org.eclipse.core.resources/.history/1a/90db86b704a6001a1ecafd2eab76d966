package playGame;
import java.util.ArrayList;
import java.util.HashMap;
import Cards.Card;


public class Player {
	int playerNumber;
	public ArrayList<Card> playerHand;
	int highCard;
	double balance;
	boolean allIn;
	boolean folded;
	public HashMap<String, Integer> ratingSystem;
	
	
	Player(int i){
		this.playerNumber = i;
		this.balance = 500;
		this.folded =false;
		
	}
	
	public void addHand(ArrayList<Card> incomingCards) {
		this.playerHand = incomingCards;
	}
	
	public String checkBet(double bidIntoPot) { 
		//Start with a basis Check to see if player is already All in
		
		if(this.allIn == true) {
			return "ALL IN";	
		}

		else if(this.balance - bidIntoPot > 0) {
			this.balance = this.balance - bidIntoPot;
			return "Okay";
		}
		
		else if(this.balance - bidIntoPot ==0 ){
			this.balance = this.balance - bidIntoPot;
			this.allIn = true;
			return "ALL IN";
		}
		
		else {
			return "Retry";
		}
		
	}
	
	public String bet(double bidIntoPot) {
		String resp = this.checkBet(bidIntoPot);
		return resp;
	}
	
	public int evalHighCard(ArrayList<Card> cards) {
		int highCard = 0;
		for (Card currCard: cards) {
			int currNumber = currCard.number;
			if (currNumber == 0) {  // If the card is an Ace treat it as high.
				highCard = 13;
			}
			else if(currNumber > highCard) {
				highCard = currNumber;
			}
			
		}

		return highCard;
		
	}
	
	public HashMap<String, Integer> evaluateHand(ArrayList<Card> potCards) {
		ratingSystem = new HashMap<String, Integer>(); // Rating System
		
		ArrayList<Card> combinedCard = new ArrayList<Card>();
		combinedCard.addAll(potCards);
		combinedCard.addAll(playerHand);   // Combine all hands
		
		int highValue = evalHighCard(combinedCard);
		ratingSystem.put("HighCard", highValue);
		
		
		
		
		
		
		
		
		
	} 
	
	
	
}
